version: '3.8'

services:
  frontend:
    build:
      context: ./g-scores-fe
      dockerfile: Dockerfile
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - backend
    networks:
      - app-network
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      - VUE_APP_API_URL=${API_URL:-http://localhost:3000}
      - VUE_APP_WS_URL=${WS_URL:-ws://localhost:3000/cable}
      - NGINX_HOST=${NGINX_HOST:-localhost}
      - CORS_ORIGIN=${CORS_ORIGIN:-*}
      - SSL_CONFIG=${SSL_CONFIG:-}
      - HSTS_HEADER=${HSTS_HEADER:-}
      - API_URL=${API_URL:-http://backend:3000}
      - WS_URL=${WS_URL:-ws://backend:3000/cable}
    volumes:
      - ./g-scores-fe/dist:/usr/share/nginx/html
      - ./g-scores-fe/nginx/default.conf:/etc/nginx/conf.d/default.conf
      - ${SSL_CERTS_PATH:-./certs}:/etc/nginx/certs
    restart: always

  backend:
    build:
      context: ./g-scores-be
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
      - "3001:3001"
    environment:
      - RAILS_ENV=${RAILS_ENV:-development}
      - POSTGRES_HOST=db
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=g_scores_${RAILS_ENV:-development}
      - REDIS_URL=redis://redis:6379/1
      - SECRET_KEY_BASE=c4f5df38356866bec46b068133f25de3dfd80979d9fb7f2f8cfae4c6c1a1b930b89d9b1d28fe0d246c2ef3b2bdb4b79e6ac72a202298308b90f67805bf09f443
      - ALLOWED_ORIGINS=${ALLOWED_ORIGINS:-http://localhost,http://localhost:80}
      - CABLE_ALLOWED_REQUEST_ORIGINS=${CABLE_ALLOWED_REQUEST_ORIGINS:-http://localhost,http://localhost:80}
      - CABLE_URL=${CABLE_URL:-ws://localhost:3000/cable}
      - SSL_KEY_PATH=${SSL_KEY_PATH:-/app/config/ssl/server.key}
      - SSL_CERT_PATH=${SSL_CERT_PATH:-/app/config/ssl/server.crt}
    volumes:
      - ./g-scores-be:/app
      - ./g-scores-be/log:/app/log
      - ./tmp/csv_imports:/app/tmp/csv_imports
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
    networks:
      - app-network

  sidekiq:
    build:
      context: ./g-scores-be
      dockerfile: Dockerfile
    environment:
      - RAILS_ENV=production
      - POSTGRES_HOST=db
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=g_scores_production
      - REDIS_URL=redis://redis:6379/1
      - SECRET_KEY_BASE=c4f5df38356866bec46b068133f25de3dfd80979d9fb7f2f8cfae4c6c1a1b930b89d9b1d28fe0d246c2ef3b2bdb4b79e6ac72a202298308b90f67805bf09f443
    volumes:
      - ./g-scores-be:/app
      - ./g-scores-be/log:/app/log
      - ./tmp/csv_imports:/app/tmp/csv_imports
    depends_on:
      - db
      - redis
    networks:
      - app-network
    command: bundle exec sidekiq -C config/sidekiq.yml

  db:
    image: postgres:15
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=g_scores_production
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data: